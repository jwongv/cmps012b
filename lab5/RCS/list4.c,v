head	1.12;
access;
symbols;
locks;
comment	@ * @;


1.12
date	2012.11.06.19.48.29;	author -;	state -;
branches;
next	1.11;

1.11
date	2012.11.06.19.46.52;	author -;	state -;
branches;
next	1.10;

1.10
date	2012.11.06.19.46.31;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.11.06.19.43.33;	author -;	state -;
branches;
next	1.8;

1.8
date	2012.11.06.19.42.27;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.11.06.19.42.16;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.11.06.19.39.54;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.11.06.19.39.37;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.11.06.19.37.26;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.11.06.19.20.20;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.11.06.19.19.55;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.11.06.19.18.35;	author -;	state -;
branches;
next	;


desc
@@


1.12
log
@-
@
text
@// $Id: list4.c,v 1.11 2012-11-06 11:46:52-08 - - $

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct node *node_ref;
struct node {
   char *word;
   node_ref link;
};

int main (int argc, char **argv) {
   node_ref head=NULL;
   for (int argi = 0; argi < argc; ++argi) {
      node_ref node = malloc (sizeof (struct node));
      assert (node != NULL);
      node->word = argv[argi];
      node->link = head;
      head = node;
   }
   for (node_ref curr = head; curr->link != NULL; curr = curr->link) {
      printf ("%p->node {word=%p->[%s], link=%p}\n",
              curr, curr->word, curr->word, curr->link);
   }

   while(head!=NULL){
      node_ref tmp = head;
      head = head->link;
      free(tmp);
   }
   return 9;
}
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.10 2012-11-06 11:46:31-08 - - $
d28 3
a30 3
   node_ref tmp = head;
   head = head->link;
   free(tmp);
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.9 2012-11-06 11:43:33-08 - - $
d30 1
a30 1
   free(temp);
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.8 2012-11-06 11:42:27-08 - - $
d26 6
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.7 2012-11-06 11:42:16-08 - - $
a24 2
      free(curr);
      free(curr->link);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.6 2012-11-06 11:39:54-08 - - $
d26 1
a26 1
      free(curr-link);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.5 2012-11-06 11:39:37-08 - - $
d26 1
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.4 2012-11-06 11:37:26-08 - - $
d25 1
a25 1
      free(head);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: list3.c,v 1.8 2012-11-06 11:33:50-08 - - $
d25 1
a26 1
   free (head);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.2 2012-11-06 11:19:55-08 - - $
d14 2
a15 2
   node_ref head;
   for (int argi = 0; argi < 5; ++argi) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.1 2012-11-06 11:18:35-08 - - $
d26 1
a26 1
   free (curr);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: list3.c,v 1.6 2012-11-06 11:14:32-08 - - $
d26 1
a26 1
   free (node);
@
