head	1.20;
access;
symbols;
locks;
comment	@ * @;


1.20
date	2012.11.24.06.50.15;	author -;	state -;
branches;
next	1.19;

1.19
date	2012.11.20.19.26.56;	author -;	state -;
branches;
next	1.18;

1.18
date	2012.11.20.19.23.03;	author -;	state -;
branches;
next	1.17;

1.17
date	2012.11.20.19.17.45;	author -;	state -;
branches;
next	1.16;

1.16
date	2012.11.20.19.17.34;	author -;	state -;
branches;
next	1.15;

1.15
date	2012.11.20.19.16.59;	author -;	state -;
branches;
next	1.14;

1.14
date	2012.11.20.19.14.19;	author -;	state -;
branches;
next	1.13;

1.13
date	2012.11.20.19.09.39;	author -;	state -;
branches;
next	1.12;

1.12
date	2012.11.20.19.08.33;	author -;	state -;
branches;
next	1.11;

1.11
date	2012.11.20.18.48.43;	author -;	state -;
branches;
next	1.10;

1.10
date	2012.11.20.18.46.59;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.11.20.18.39.37;	author -;	state -;
branches;
next	1.8;

1.8
date	2012.11.20.18.37.22;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.11.20.18.36.28;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.11.20.18.35.25;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.11.20.17.47.03;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.11.20.10.00.34;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.11.02.02.34.52;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.02.21.22.57.52;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.02.15.04.32.33;	author -;	state -;
branches;
next	;


desc
@@


1.20
log
@-
@
text
@/* $Id: queue.c,v 1.19 2012-11-20 11:26:56-08 - - $ */
// Jacky Wong - jagwong@@ucsc.edu
// ID: 1281439

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "queue.h"

#define STUBPRINTF(...) fprintf (stderr, __VA_ARGS__);

static char *queue_tag = "struct queue";
static char *queuenode_tag = "struct queuenode";

typedef struct queuenode *queuenode_ref;

struct queuenode {
   char *tag;
   queue_item_t item;
   queuenode_ref link;
};

struct queue {
   char *tag;
   queuenode_ref front;
   queuenode_ref rear;
};

queue_ref new_queue (void) {
   queue_ref new = malloc (sizeof (struct queue));
   assert (new != NULL);
   new->tag = queue_tag;
   new->front = NULL;
   new->rear = NULL;
   return new;
}

void free_queue (queue_ref queue) {
   assert (is_queue (queue));
   assert (isempty_queue (queue));
   memset (queue, 0, sizeof (struct queue));
   free (queue);
}

void insert_queue (queue_ref queue, queue_item_t item) {
   assert (is_queue (queue));
   queuenode_ref newnode = malloc (sizeof (struct queuenode));
   newnode->tag = queuenode_tag;
   newnode->item = item;
   newnode->link = NULL;
   if (isempty_queue(queue)){
      queue->front = newnode;
      queue->rear = newnode;
   }
   else{
      queue->rear->link = newnode;
      queue->rear = newnode;
   }
}

queue_item_t remove_queue (queue_ref queue) {
   assert (is_queue (queue));
   assert (! isempty_queue (queue));
   queue_item_t olditem  = queue->front->item;
   queuenode_ref oldnode = queue->front;
   queue->front = queue->front->link;
   free(oldnode);
   return olditem;
}

bool isempty_queue (queue_ref queue) {
   assert (is_queue (queue));
   return queue->front == NULL;
}

bool is_queue (queue_ref queue) {
   return queue != NULL && queue->tag == queue_tag;
}

@


1.19
log
@-
@
text
@d1 3
a3 1
/* $Id: queue.c,v 1.18 2012-11-20 11:23:03-08 - - $ */
@


1.18
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.17 2012-11-20 11:17:45-08 - - $ */
d65 1
d67 1
@


1.17
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.16 2012-11-20 11:17:34-08 - - $ */
a64 1
   free(queue->front->tag);
@


1.16
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.15 2012-11-20 11:16:59-08 - - $ */
d65 1
a65 1
   free(front->tag);
@


1.15
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.14 2012-11-20 11:14:19-08 - - $ */
d65 1
a65 1
   queuenode_ref oldnode = queue->front;
a66 2
   free(oldnode);
   free(oldnode->tag);
@


1.14
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.13 2012-11-20 11:09:39-08 - - $ */
d68 1
@


1.13
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.12 2012-11-20 11:08:33-08 - - $ */
d65 1
d67 1
@


1.12
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.11 2012-11-20 10:48:43-08 - - $ */
a64 1
   queuenode_ref oldnode = queue->front;
a65 1
   free(oldnode->item);
@


1.11
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.10 2012-11-20 10:46:59-08 - - $ */
d65 1
d67 1
@


1.10
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.9 2012-11-20 10:39:37-08 - - $ */
a64 1
   free (queue->front->item);
@


1.9
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.8 2012-11-20 10:37:22-08 - - $ */
d65 1
a65 2
//   queuenode_ref oldnode = queue->front;
//   free (queue->front->item);
@


1.8
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.7 2012-11-20 10:36:28-08 - - $ */
d66 1
a66 1
   free (queue->front->item);
@


1.7
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.6 2012-11-20 10:35:25-08 - - $ */
d67 1
a67 1
   front = front->link;
@


1.6
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.5 2012-11-20 09:47:03-08 - - $ */
d67 1
a67 1
   queue->front = queue->front->link;
@


1.5
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.4 2012-11-20 02:00:34-08 - - $ */
d64 5
a68 1
   return NULL;
@


1.4
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.3 2012-11-01 19:34:52-07 - - $ */
d31 1
a31 1
   assrt (new != NULL);
d47 12
a58 1
   STUBPRINTF ("item =\n\t\"%s\"\n", item);
a63 1
   STUBPRINTF ("return NULL\n");
@


1.3
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.2 2012-02-21 14:57:52-08 - - $ */
d30 6
a35 2
   STUBPRINTF ("return NULL\n");
   return NULL;
@


1.2
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.1 2012-02-14 20:32:33-08 - - $ */
a54 1
   // LINTED (assignment of 32-bit integer to 8-bit integer)
a58 1
   // LINTED (assignment of 32-bit integer to 8-bit integer)
@


1.1
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.2 2012-02-14 20:32:06-08 - - $ */
d55 1
d60 1
@
