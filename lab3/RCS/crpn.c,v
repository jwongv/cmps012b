head	1.4;
access;
symbols;
locks;
comment	@ * @;


1.4
date	2012.10.25.05.56.05;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.10.25.05.30.36;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.10.25.01.43.21;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.10.25.00.06.36;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: crpn.c,v 1.3 2012-10-24 22:30:36-07 - - $

// Jacky Wong - jagwong@@ucsc.edu
// ID: 1281439

#include <assert.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

int main (int argc, char **argv) {
   assert (argc == 1);
   printf ("%s:\n", argv[0]);

   #define STACK_SIZE 16
   #define EMPTY (-1)
   double stack[STACK_SIZE];
   int top = EMPTY;
   int i = 0;

   for (;;) {
      char buffer[4096];

      int scanct = scanf ("%4095s", buffer);
      if (scanct == EOF) {
         printf ("EOF\n");
         break;
      }
      assert (scanct == 1);

      if (buffer[0] == '#') {
         scanf ("%4095[^\n]", buffer);
         continue;
      }

      char *endptr = NULL;
      double number = strtod (buffer, &endptr);
      char operator = buffer[0];
      if (*endptr == '\0') { 
        if (top < STACK_SIZE-1){
            stack[++top] = number;
        }else
           fprintf(stderr, "Error: Stack overflow!\n");
        }
      else{
         switch (operator){
            case '+' :
               if (top-1 > EMPTY) {
                 stack [top-1] = stack[top-1] + stack[top];
                 top = top - 1;
               }else
                  fprintf(stderr, "Error: Stack underflow!\n");
               break;
            case '-' :
               if (top-1 > EMPTY) {
                 stack [top-1] = stack[top-1] - stack[top];
                 top = top - 1;
               }else
                  fprintf(stderr, "Error: Stack underflow!\n");
               break;
            case '*' :
               if (top-1 > EMPTY) {
                 stack [top-1] = stack[top-1] * stack[top];
                 top = top - 1;
               }else
                  fprintf(stderr, "Error: Stack underflow!\n");
               break;
            case '/' :
               if (top-1 > EMPTY) {
                 stack [top-1] = stack[top-1] / stack[top];
                 top = top - 1;
               }else
                  fprintf(stderr, "Error: Stack underflow!\n");
               break;
            case ';' :
               for (i =top; i > -1; i--){
                   printf("%22.15g\n", stack[top-i]);
               }
               break;
            case '~' :
               break;
            default:
               fprintf (stderr, "%s is not a valid operator!\n", buffer);
               continue;

         }
      }
   }
    return EXIT_SUCCESS;
}
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: crpn.c,v 1.2 2012-10-24 18:43:21-07 - - $
d3 2
d83 1
a83 1
               fprintf (stderr, "%s is not valid!\n", buffer);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: crpn.c,v 1.1 2012-10-24 17:06:36-07 - - $
d17 1
d23 4
a27 1
      size_t length = strlen (buffer);
d30 1
a30 1
         scanf ("%4095[^\n"]", buffer);
d36 9
a44 3
      if (*endptr == '\0') {
      }else{
         switch (buffer[0]){
d46 5
d53 5
d60 5
d67 5
d74 3
d80 3
a82 2


a85 3



a86 1

@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d13 34
d50 2
d53 5
@
