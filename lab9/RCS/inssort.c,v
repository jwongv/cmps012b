head	1.30;
access;
symbols;
locks;
comment	@ * @;


1.30
date	2012.12.06.05.54.07;	author -;	state -;
branches;
next	1.29;

1.29
date	2012.12.06.04.21.57;	author -;	state -;
branches;
next	1.28;

1.28
date	2012.12.06.04.06.56;	author -;	state -;
branches;
next	1.27;

1.27
date	2012.12.06.04.03.51;	author -;	state -;
branches;
next	1.26;

1.26
date	2012.12.06.04.01.03;	author -;	state -;
branches;
next	1.25;

1.25
date	2012.12.06.03.57.50;	author -;	state -;
branches;
next	1.24;

1.24
date	2012.12.06.03.57.04;	author -;	state -;
branches;
next	1.23;

1.23
date	2012.12.06.03.56.27;	author -;	state -;
branches;
next	1.22;

1.22
date	2012.12.06.03.56.12;	author -;	state -;
branches;
next	1.21;

1.21
date	2012.12.06.03.54.12;	author -;	state -;
branches;
next	1.20;

1.20
date	2012.12.06.03.51.54;	author -;	state -;
branches;
next	1.19;

1.19
date	2012.12.06.03.40.00;	author -;	state -;
branches;
next	1.18;

1.18
date	2012.12.06.03.36.23;	author -;	state -;
branches;
next	1.17;

1.17
date	2012.12.06.03.34.43;	author -;	state -;
branches;
next	1.16;

1.16
date	2012.12.06.03.33.19;	author -;	state -;
branches;
next	1.15;

1.15
date	2012.12.06.03.28.04;	author -;	state -;
branches;
next	1.14;

1.14
date	2012.12.06.03.24.37;	author -;	state -;
branches;
next	1.13;

1.13
date	2012.12.06.03.22.15;	author -;	state -;
branches;
next	1.12;

1.12
date	2012.12.06.03.16.47;	author -;	state -;
branches;
next	1.11;

1.11
date	2012.12.06.03.13.08;	author -;	state -;
branches;
next	1.10;

1.10
date	2012.12.06.03.11.55;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.12.06.03.01.15;	author -;	state -;
branches;
next	1.8;

1.8
date	2012.12.06.02.57.10;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.12.04.21.37.42;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.12.04.21.37.17;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.12.04.21.36.12;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.12.04.21.29.40;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.12.04.21.25.48;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.12.04.21.23.48;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.12.04.20.56.13;	author -;	state -;
branches;
next	;


desc
@@


1.30
log
@-
@
text
@#include <ctype.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <values.h>

#include "inssort.h"

void inssort (void *base, size_t nelem, size_t size, 
              int (*compar) (const void *, const void *)){
   
   for (size_t index = 1; index < nelem; ++index){
      int slot = index;
      void *copy[size];
      memcpy (copy,  base + slot * size, size);
      for (;slot > 0; --slot){
         int cmp = compar(copy, base + (slot - 1) * size);
         if (cmp > 0) break;
         memcpy ((char*)base + slot * size,  
                base + (slot - 1) * size, size);
      }
      memcpy (base + slot * size, copy, size);
   }


}
@


1.29
log
@-
@
text
@a13 1
//      void *element = (char *) base + index * size;
d20 2
a21 1
         memcpy ((char*)base + slot * size,  base + (slot - 1) * size, size);
@


1.28
log
@-
@
text
@d19 1
a19 1
         int cmp = compar(copy,(char*) base + (slot - 1) * size);
d21 1
a21 1
         memcpy ((char*)base + slot * size, (char*) base + (slot - 1) * size, size);
d23 1
a23 1
      memcpy ((char*)base + slot * size, copy, size);
@


1.27
log
@-
@
text
@d16 1
a16 1
      void *copy[nelem];
@


1.26
log
@-
@
text
@d21 1
a21 1
         memcpy (base + slot * size,  base + (slot - 1) * size, size);
d23 1
a23 1
      memcpy (base + slot * size, copy, size);
@


1.25
log
@-
@
text
@d17 1
a17 1
      memcpy (copy, (char*) base + slot * size, size);
@


1.24
log
@-
@
text
@d21 1
a21 1
         memcpy (base + slot * size, (char*) base + (slot - 1) * size, size);
d23 1
a23 1
      memcpy ((char*)base + slot * size, copy, size);
@


1.23
log
@-
@
text
@d13 1
a13 1
   for (size_t index = 0; index < nelem; ++index){
@


1.22
log
@-
@
text
@d16 1
a16 1
      void *copy[size];
@


1.21
log
@-
@
text
@d16 1
a16 1
      void *copy[nelem];
@


1.20
log
@-
@
text
@d13 1
a13 1
   for (size_t index = 1; index < nelem; ++index){
@


1.19
log
@-
@
text
@d18 1
a18 1
      for (; slot > 0; --slot){
@


1.18
log
@-
@
text
@d13 1
a13 1
   for (int index = 1; index < nelem; ++index){
@


1.17
log
@-
@
text
@d13 1
a13 1
   for (size_t index = 1; index < nelem; ++index){
d15 1
a15 1
      size_t slot = index;
@


1.16
log
@-
@
text
@d16 1
a16 1
      void *copy[size];
@


1.15
log
@-
@
text
@d16 2
a17 2
      void *copy[nelem];
      memcpy (copy, (char*)   base + slot * size, size);
d19 1
a19 1
         int cmp = compar(copy,  base + (slot - 1) * size);
d21 1
a21 1
         memcpy (base + slot * size, base + (slot - 1) * size, size);
d23 1
a23 1
      memcpy (base + slot * size, copy, size);
@


1.14
log
@-
@
text
@d17 1
a17 1
      memcpy (copy,   base + slot * size, size);
@


1.13
log
@-
@
text
@d17 1
a17 1
      memcpy (copy, (char*)  base + slot * size, size);
@


1.12
log
@-
@
text
@d14 1
a14 1
      void *element = (char *) base + index * size;
d16 1
a16 1
      void *copy[size];
@


1.11
log
@-
@
text
@d19 1
a19 1
         int cmp = compar(copy + slot * size,  base + (slot - 1) * size);
d23 1
a23 1
      memcpy (base + slot * size, copy + slot * size, size);
@


1.10
log
@-
@
text
@d17 1
a17 1
      memcpy (copy, (char*) base + slot * size, size);
d19 1
a19 1
         int cmp = compar(copy + slot * size, (char*) base + (slot - 1) * size);
@


1.9
log
@-
@
text
@d14 4
a17 5
//      void *element = (char *) base + index * size;
      int slot = index;
      char copy[nelem];
      memcpy (copy[slot], base[slot], size);
//      memcpy (copy + slot * size, base + slot * size, size);
d19 1
a19 2
         int cmp = compar(copy[slot], base[slot-1]);
//         int cmp = compar(copy + slot * size, (char*) base + (slot - 1) * size);
d21 1
a21 2
         memcpy (base[slot], base[slot-1],size);
//         memcpy (base + slot * size, base + (slot - 1) * size, size);
d23 1
a23 2
      memcpy (base[slot], copy[slot], size);
//      memcpy (base + slot * size, copy + slot * size, size);
@


1.8
log
@-
@
text
@d17 2
a18 1
      memcpy (copy + slot * size, base + slot * size, size);
d20 2
a21 1
         int cmp = compar(copy + slot * size, (char*) base + (slot - 1) * size);
d23 2
a24 1
         memcpy (base + slot * size, base + (slot - 1) * size, size);
d26 2
a27 1
      memcpy (base + slot * size, copy + slot * size, size);
@


1.7
log
@-
@
text
@d16 1
a16 1
      char *copy = malloc (nelem);
@


1.6
log
@-
@
text
@d16 1
a16 1
      char *copy = malloc (nelem-1);
@


1.5
log
@-
@
text
@d16 1
a16 2
      void *copy= (char*) base + index * size;
      char *copy = malloc (nelem);
@


1.4
log
@-
@
text
@d16 1
d18 3
a20 3
      memcpy ((char*)copy + slot * size,(char*) base + slot * size, size);
      for (; slot > 1; --slot){
         int cmp = compar((char*)copy + slot * size, (char*) base + (slot - 1) * size);
d22 1
a22 1
         memcpy ((char*)base + slot * size, (char*)base + (slot - 1) * size, size);
d24 1
a24 1
      memcpy ((char*)base + slot * size, (char*)copy + slot * size, size);
@


1.3
log
@-
@
text
@d17 1
a17 1
      memcpy (copy + slot * size, base + slot * size, size);
d19 1
a19 1
         int cmp = compar(copy + slot * size,(char*) base + (slot - 1) * size);
d21 1
a21 1
         memcpy (base + slot * size, base + (slot - 1) * size, size);
d23 1
a23 1
      memcpy (base + slot * size, copy + slot * size, size);
@


1.2
log
@-
@
text
@d21 1
a21 1
         memcpy (copy + slot * size, base + (slot - 1) * size, size);
@


1.1
log
@-
@
text
@d16 1
a16 1
      char *copy = malloc (size);
@
