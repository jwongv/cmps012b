head	1.27;
access;
symbols;
locks;
comment	@ * @;


1.27
date	2012.12.06.06.15.37;	author -;	state -;
branches;
next	1.26;

1.26
date	2012.12.06.06.15.01;	author -;	state -;
branches;
next	1.25;

1.25
date	2012.12.06.06.12.58;	author -;	state -;
branches;
next	1.24;

1.24
date	2012.12.06.06.02.41;	author -;	state -;
branches;
next	1.23;

1.23
date	2012.12.06.06.02.25;	author -;	state -;
branches;
next	1.22;

1.22
date	2012.12.06.05.52.45;	author -;	state -;
branches;
next	1.21;

1.21
date	2012.12.06.05.51.57;	author -;	state -;
branches;
next	1.20;

1.20
date	2012.12.06.05.51.03;	author -;	state -;
branches;
next	1.19;

1.19
date	2012.12.06.05.49.38;	author -;	state -;
branches;
next	1.18;

1.18
date	2012.12.06.05.44.12;	author -;	state -;
branches;
next	1.17;

1.17
date	2012.12.06.04.08.00;	author -;	state -;
branches;
next	1.16;

1.16
date	2012.12.06.03.55.09;	author -;	state -;
branches;
next	1.15;

1.15
date	2012.12.06.03.53.18;	author -;	state -;
branches;
next	1.14;

1.14
date	2012.12.06.03.52.41;	author -;	state -;
branches;
next	1.13;

1.13
date	2012.12.06.03.51.54;	author -;	state -;
branches;
next	1.12;

1.12
date	2012.12.06.03.49.47;	author -;	state -;
branches;
next	1.11;

1.11
date	2012.12.06.03.48.12;	author -;	state -;
branches;
next	1.10;

1.10
date	2012.12.06.03.46.32;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.12.06.03.44.45;	author -;	state -;
branches;
next	1.8;

1.8
date	2012.12.06.03.40.00;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.12.06.03.28.03;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.12.06.03.27.22;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.12.04.21.15.24;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.12.04.21.11.05;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.12.04.21.01.50;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.12.04.21.00.54;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.12.04.20.56.13;	author -;	state -;
branches;
next	;


desc
@@


1.27
log
@-
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libgen.h>
#include <unistd.h>

#include "inssort.h"

static int compar (const void *copy, const void *original){
    if (*(double* const*)copy < *(double* const*)original) return -1;
    if (*(double* const*)copy > *(double* const*)original) return 1;
    return 0;
}

int main (){
    double array[1000];
    int max = 0;
    for (int i = 0;i < 999; ++i){
       double number;
       int check = scanf ("%lg", &number);

       if (check == EOF){
          printf ("EOF\n");
          break;
       }else if (check == 1) {
          array [i] = number;
          ++max;
       }
    }

    inssort (&array[0], max, sizeof(double) ,compar);

    for (int i = 0; i < max; i++){
       printf ("%20.15g\n", array[i]);
    }
}
@


1.26
log
@-
@
text
@d28 1
a28 1
       }else break;
@


1.25
log
@-
@
text
@d25 1
a25 2
       }else if (check != 1) break;
       else if (check == 1) {
d28 1
a28 1
       }
@


1.24
log
@-
@
text
@d25 2
a26 1
       }else if (check == 1) {
@


1.23
log
@-
@
text
@a34 1
       free (array[i]);
@


1.22
log
@-
@
text
@d35 1
@


1.21
log
@-
@
text
@d15 1
a15 2
int main (int argc, char **argv){
    argc = argc;
@


1.20
log
@-
@
text
@d24 1
a24 1
          printf ("%s: EOF\n", progname);
@


1.19
log
@-
@
text
@d16 1
a16 1
    char *progname = basename (argv[0]);
@


1.18
log
@-
@
text
@d10 2
a11 2
    if (*(double* const*)copy < *(double* const*)original) {return -1;}
    if (*(double* const*)copy > *(double* const*)original) {return 1;}
a28 2
       } else{
          //print error
@


1.17
log
@-
@
text
@d19 1
a19 1
    for (int i = 0;i < 1000; ++i){
@


1.16
log
@-
@
text
@d34 1
a34 1
    inssort (&array[1], max, sizeof(double) ,compar);
@


1.15
log
@-
@
text
@d10 2
a11 2
    if (*(double* const*)copy < *(double* const*)original) {printf ("less!");  return -1;}
    if (*(double* const*)copy > *(double* const*)original) {printf ("more!");  return 1;}
@


1.14
log
@-
@
text
@d34 1
a34 1
    qsort (&array[1], max, sizeof(double) ,compar);
@


1.13
log
@-
@
text
@d10 2
a11 2
    if (*(double* const*)copy < *(double* const*)original) printf ("less!");  return -1;
    if (*(double* const*)copy > *(double* const*)original) printf ("more!");  return 1;
@


1.12
log
@-
@
text
@d9 1
a9 1
int compar (const void *copy, const void *original){
@


1.11
log
@-
@
text
@d10 2
a11 2
    if ((double*)copy < (double*)original) printf ("less!");  return -1;
    if ((double*)copy > (double*)original) printf ("more!");  return 1;
@


1.10
log
@-
@
text
@d34 1
a34 1
    qsort (array, max, sizeof(double) ,compar);
@


1.9
log
@-
@
text
@d10 2
a11 2
    if (*(double*)copy < *(double*)original) printf ("less!");  return -1;
    if (*(double*)copy > *(double*)original) printf ("more!");  return 1;
@


1.8
log
@-
@
text
@d10 2
a11 2
    if (copy < original) printf ("less!");  return -1;
    if (copy > original) printf ("more!");  return 1;
@


1.7
log
@-
@
text
@d34 1
a34 1
    inssort (array, max, sizeof(double) ,compar);
@


1.6
log
@-
@
text
@d12 1
a12 1
    else return 0;
@


1.5
log
@-
@
text
@d10 2
a11 2
    if (copy < original) return -1;
    if (copy > original) return 1;
@


1.4
log
@-
@
text
@d34 1
a34 1
       inssort (array, max,sizeof *array ,compar);
@


1.3
log
@-
@
text
@a33 1
    for (int i = 0; i < max; i++){
a34 1
    }
@


1.2
log
@-
@
text
@d9 1
a9 1
int compar (void *copy, void *original){
@


1.1
log
@-
@
text
@d35 4
@
