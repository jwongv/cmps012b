head	1.33;
access;
symbols;
locks;
comment	@ * @;


1.33
date	2012.11.16.22.59.17;	author -;	state -;
branches;
next	1.32;

1.32
date	2012.11.16.22.00.01;	author -;	state -;
branches;
next	1.31;

1.31
date	2012.11.16.21.48.15;	author -;	state -;
branches;
next	1.30;

1.30
date	2012.11.16.21.47.26;	author -;	state -;
branches;
next	1.29;

1.29
date	2012.11.16.21.46.37;	author -;	state -;
branches;
next	1.28;

1.28
date	2012.11.16.21.46.16;	author -;	state -;
branches;
next	1.27;

1.27
date	2012.11.16.21.44.53;	author -;	state -;
branches;
next	1.26;

1.26
date	2012.11.16.21.44.40;	author -;	state -;
branches;
next	1.25;

1.25
date	2012.11.16.21.40.51;	author -;	state -;
branches;
next	1.24;

1.24
date	2012.11.16.20.54.35;	author -;	state -;
branches;
next	1.23;

1.23
date	2012.11.16.20.53.15;	author -;	state -;
branches;
next	1.22;

1.22
date	2012.11.16.20.50.05;	author -;	state -;
branches;
next	1.21;

1.21
date	2012.03.09.02.56.47;	author -;	state -;
branches;
next	1.20;

1.20
date	2011.11.11.05.25.02;	author -;	state -;
branches;
next	1.19;

1.19
date	2011.11.11.05.21.54;	author -;	state -;
branches;
next	1.18;

1.18
date	2011.11.11.05.21.25;	author -;	state -;
branches;
next	1.17;

1.17
date	2011.11.11.05.17.18;	author -;	state -;
branches;
next	1.16;

1.16
date	2011.11.11.05.16.46;	author -;	state -;
branches;
next	1.15;

1.15
date	2011.11.11.05.16.17;	author -;	state -;
branches;
next	1.14;

1.14
date	2011.11.11.05.15.50;	author -;	state -;
branches;
next	1.13;

1.13
date	2011.11.11.05.15.19;	author -;	state -;
branches;
next	1.12;

1.12
date	2011.11.11.05.14.33;	author -;	state -;
branches;
next	1.11;

1.11
date	2011.11.11.05.13.36;	author -;	state -;
branches;
next	1.10;

1.10
date	2011.11.11.05.12.44;	author -;	state -;
branches;
next	1.9;

1.9
date	2011.11.11.05.07.19;	author -;	state -;
branches;
next	1.8;

1.8
date	2011.11.11.05.07.06;	author -;	state -;
branches;
next	1.7;

1.7
date	2011.11.11.05.06.24;	author -;	state -;
branches;
next	1.6;

1.6
date	2011.11.11.05.06.11;	author -;	state -;
branches;
next	1.5;

1.5
date	2011.11.11.05.05.47;	author -;	state -;
branches;
next	1.4;

1.4
date	2011.11.11.05.05.36;	author -;	state -;
branches;
next	1.3;

1.3
date	2011.11.11.05.04.37;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.11.11.05.03.39;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.11.11.05.03.05;	author -;	state -;
branches;
next	;


desc
@@


1.33
log
@-
@
text
@// $Id: voidstar.c,v 1.32 2012-11-16 14:00:01-08 - - $

//
// Simple example of void* processing in C.
// The function process takes an array and a function and
// processes the array according to the rules given by a
// function.
//

#include <ctype.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <values.h>

//
// Process an array by applying a function to each element.
//
void process (void *base,   // of the array
              size_t nelem, // number of elements
              size_t size,  // size of one element
              void (*function) (void *)) {
   for (size_t index = 0; index < nelem; ++index) {
      void *element = (char *) base + index * size;
      function (element);
   }
}

//
// Array of strings with two processing functions.
//
char *strings[] = {
   "hello", "world", "foo", "bar", "baz", "qux",
   "this", "is", "a", "test", 
};

void strdupthem (void *string) {
   char **chars = (char **) string;
   *chars = strdup (*chars);
}

void capitalize (void *string) {
   for (char *chars = * (char **) string; *chars != '\0'; ++chars) {
      *chars = toupper (*chars);
   }
}

void printstr (void *string) {
   (void) printf (" %s", * (char **) string);
}

void freestr (void *string) {
   char *str = * (char **) string;
   free (str);
   str = NULL;
}


//
// Array of doubles with two processing functions.
//

double numbers[] = {6.02e23, 287, -472, 0, 6e-22, MAXDOUBLE};

void exponent (void *number) {
   double *value = (double *) number;
   *value = log10 (*value);
}

void printnum (void *number) {
   (void) printf (" %10.3e", * (double *) number);
}

//
// Main function to exercise them.
//

int main (void) {

   size_t stringdim = sizeof strings / sizeof *strings;
   process (strings, stringdim, sizeof *strings, printstr);
   (void) printf ("\n");
   process (strings, stringdim, sizeof *strings, strdupthem);
   process (strings, stringdim, sizeof *strings, capitalize);
   process (strings, stringdim, sizeof *strings, printstr);
   process (strings, stringdim, sizeof *strings, freestr);
   (void) printf ("\n");

   size_t numberdim = sizeof numbers / sizeof *numbers;
   process (numbers, numberdim, sizeof *numbers, printnum);
   (void) printf ("\n");
   process (numbers, numberdim, sizeof *numbers, exponent);
   process (numbers, numberdim, sizeof *numbers, printnum);
   (void) printf ("\n");

   return EXIT_SUCCESS;
}

//TEST// runprog -x voidstar.lis valgrind --leak-check=full voidstar
//TEST// mkpspdf Listing.ps voidstar.c voidstar.c.log voidstar.lis

@


1.32
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.31 2012-11-16 13:48:15-08 - - $
d64 1
a64 1
double numbers[] = {6.02e23, 49, 287, -472, 0, 6e-22, MAXDOUBLE};
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.30 2012-11-16 13:47:26-08 - - $
d64 1
a64 1
double numbers[] = {6.02e23, 49, 287, -99, -472, 0, 6e-22, MAXDOUBLE};
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.29 2012-11-16 13:46:37-08 - - $
d72 1
a72 1
   (void) printf (" %11.4e", * (double *) number);
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.28 2012-11-16 13:46:16-08 - - $
d72 1
a72 1
   (void) printf (" %11.5e", * (double *) number);
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.27 2012-11-16 13:44:53-08 - - $
d72 1
a72 1
   (void) printf (" %11.5f", * (double *) number);
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.26 2012-11-16 13:44:40-08 - - $
d72 1
a72 1
   (void) printf (" %.5g", * (double *) number);
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.25 2012-11-16 13:40:51-08 - - $
d102 1
a102 1
/bin/sh: lla: command not found
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.24 2012-11-16 12:54:35-08 - - $
d53 1
a53 1
void printstr (void *string) {
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.23 2012-11-16 12:53:15-08 - - $
d53 6
d87 1
d102 1
a102 1

@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.22 2012-11-16 12:50:05-08 - - $
a44 1
      // LINTED (assignment of 32-bit integer to 8-bit integer)
d93 1
a93 1
//TEST// runprog -x voidstar.lis voidstar
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.21 2012-03-08 18:56:47-08 - - $
d15 1
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.20 2011-11-10 21:25:02-08 - - $
d58 1
a58 1
double numbers[] = {6.02e23, 49, 287, -99, -472, 0, 6e-22, 10e1000};
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.19 2011-11-10 21:21:54-08 - - $
a92 1
/*
d94 1
a94 3
//TEST// mkpspdf ../lab8c.voidstar-example.ps voidstar.c \
//TEST//         voidstar.c.log voidstar.lis
*/
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.18 2011-11-10 21:21:25-08 - - $
d93 1
d97 1
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.16 2011-11-10 21:16:46-08 - - $
d95 1
a95 1
//TEST//         voidstar.c.log voidstar.c.lis
@


1.17
log
@-
@
text
@d53 1
d62 1
a62 1
   *value = log10 ((*value));
d93 4
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.15 2011-11-10 21:16:17-08 - - $
d61 1
a61 1
   *value = log10 (fabs (*value));
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.14 2011-11-10 21:15:50-08 - - $
d65 1
a65 1
   (void) printf (" %.1g", * (double *) number);
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.13 2011-11-10 21:15:19-08 - - $
d65 1
a65 1
   (void) printf (" %.1f", * (double *) number);
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.12 2011-11-10 21:14:33-08 - - $
d73 1
d81 2
a84 1
   size_t numberdim = sizeof numbers / sizeof *numbers;
d88 1
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.11 2011-11-10 21:13:36-08 - - $
d65 1
a65 1
   (void) printf (" %5.1f", * (double *) number);
d74 2
d80 2
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.10 2011-11-10 21:12:44-08 - - $
d38 2
a39 2
   char *chars = * (char **) string;
   chars = strdup (chars);
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.9 2011-11-10 21:07:19-08 - - $
d38 2
a39 1
   *string = strdup (* (char**) string);
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.8 2011-11-10 21:07:06-08 - - $
d14 1
d37 4
d73 1
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.7 2011-11-10 21:06:24-08 - - $
d44 1
a44 1
   printf (" %s", * (char **) string);
d59 1
a59 1
   printf (" %5.1f", * (double *) number);
d70 1
a70 1
   printf ("\n");
d74 1
a74 1
   printf ("\n");
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.6 2011-11-10 21:06:11-08 - - $
d38 1
d67 1
a67 1
   int stringdim = sizeof strings / sizeof *strings;
d71 1
a71 1
   int numberdim = sizeof numbers / sizeof *numbers;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.5 2011-11-10 21:05:47-08 - - $
a72 1
   process
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.4 2011-11-10 21:05:36-08 - - $
d58 1
a58 1
   printf (" 5.1f", * (double *) number);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.3 2011-11-10 21:04:37-08 - - $
d11 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.2 2011-11-10 21:03:39-08 - - $
d49 1
a49 1
double numbers[] = {6.02e23, 49, 287, -99, 472, 6e-22, 10e1000};
d53 1
a53 2
   value = abs (value);
   *value = log10 (*value);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: voidstar.c,v 1.1 2011-11-10 21:03:05-08 - - $
d36 1
a36 1
   for (char *chars = string; *chars != '\0'; ++chars) {
d42 1
a42 1
   printf (" %s", string);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d21 1
a21 1
   for (int index = 0; index < nelem; ++index) {
@
