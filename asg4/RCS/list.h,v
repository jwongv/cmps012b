head	1.5;
access;
symbols;
locks;
comment	@ * @;


1.5
date	2012.11.15.05.35.53;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.11.15.05.32.49;	author -;	state -;
branches;
next	1.3;

1.3
date	2008.02.15.20.59.20;	author -;	state -;
branches;
next	1.2;

1.2
date	2008.02.15.20.57.43;	author -;	state -;
branches;
next	1.1;

1.1
date	2008.02.15.20.51.49;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: list.h,v 1.4 2012-11-14 21:32:49-08 - - $

#ifndef __LIST_H__
#define __LIST_H__

#include <stdbool.h>

//
// NAME
//    list - maintain a doubly linked list of elements.
//
// DESCRIPTION
//    A doubly linked list of elements is maintained, with the
//    ability to insert, delete, and view elements of the list
//    and to move up and down the list one step at a time.
//

typedef enum {MOVE_HEAD, MOVE_PREV, MOVE_NEXT, MOVE_LAST} list_move;
   //
   // Type:  enumeration code for moving up and down the list.
   //        Used as second argument to `setmove_list':
   //
   // MOVE_HEAD - set the cursor position to the null node at the
   //             beginning of the list.
   //
   // MOVE_LAST - set the cursor position to the last node in the
   //             list.
   //
   // MOVE_PREV - set the cursor position to the node immediately
   //             before it in the list.
   //
   // MOVE_NEXT - set the cursor position to the node immediately
   //             after the current position.
   //

typedef struct list *list_ref;
   //
   // Type:  the handle returned by the constructor and passed to
   //        the other functions.
   //

void debugdump_list (list_ref list);
   //
   // Accessor:       Prints out a debug dump of the list to stderr.
   // Precondition:   valid list.
   // Postcondition:  none.
   //


list_ref new_list (void);
   //
   // Constructor:    return a new valid empty list.
   // Precondition:   none;
   // Postcondition:  returns a properly constituted empty list.
   //

void free_list (list_ref);
   //
   // Destructor:     frees up the list and its internal headers.
   // Preconditions:  list must be valid and empty.
   // Postcondition:  memory is freed and its argument is dangling.
   // Asserts:        that the precondition is met.
   //

bool setmove_list (list_ref, list_move);
   //
   // Mutator:        moves the current position to another position
   //                 in the list (see `typedef list_move' above).
   // Precondition:   list must be valid.
   //                 MOVE_PREV may not be used in the head position.
   //                 MOVE_NEXT may not be used in the last position.
   // Postcondition:  returns TRUE if successful and FALSE if failed.
   //

char *viewcurr_list (list_ref);
   //
   // Accessor:       returns the data item in the current node in the
   //                 list.  Does not release space, this pointer's
   //                 target may not be changed or freed.
   // Precondition:   valid list and current not in the head position.
   // Postcondition:  returns NULL if called from the head positin.
   //


void insert_list (list_ref, char *);
   //
   // Mutator:        inserts new char* into the list immediately
   //                 after the current position.
   // Precondition:   valid list.
   // Postcondition:  char* passed in is now property of list and
   //                 not the client.
   //

void delete_list (list_ref);
   //
   // Mutator:        deletes the current line from the list.
   // Precondition:   valid list and not empty.
   // Postcondition:  same list with one line removed.
   //

bool empty_list (list_ref);
   //
   // Accessor:       checks to see if the list is empty.
   // Precondition:   list is valid.
   // Postcondition:  returns TRUE iff the only node is the head node.
   //

bool is_list (list_ref);
   //
   // Accessor:       checks to see if its argument is a list.
   // Precondition:   none.
   // Postcondition:  returns TRUE if is not null and is a list.
   //

#endif

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: list.h,v 1.3 2008-02-15 12:59:20-08 - - $
d49 1
d84 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: list.h,v 1.2 2008-02-15 12:57:43-08 - - $
d6 1
a6 1
#include "auxlib.h"
a17 5
typedef cstring list_item;
   //
   // Type:  elements of the linkes list.
   //

d74 1
a74 1
list_item viewcurr_list (list_ref);
d77 2
a78 2
   //                 list.  Does not release space, so if this is a
   //                 pointer, its target may not be changed or freed.
d83 1
a83 1
void insert_list (list_ref, list_item);
d85 1
a85 1
   // Mutator:        inserts new list_item into the list immediately
d88 1
a88 1
   // Postcondition:  list_item passed in is now property of list and
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: list.h,v 1.1 2008-02-15 12:51:49-08 - - $
d27 1
a27 1
   *
d30 1
a30 1
   *
d33 1
a33 1
   *
d36 1
a36 1
   *
@


1.1
log
@-
@
text
@d1 1
a1 1
/* $Id: list.h,v 1.1 2007-02-15 16:05:37-08 - - $ */
d8 9
a16 9
/*
* NAME
*    list - maintain a doubly linked list of elements.
*
* DESCRIPTION
*    A doubly linked list of elements is maintained, with the
*    ability to insert, delete, and view elements of the list
*    and to move up and down the list one step at a time.
*/
d19 3
a21 3
   /*
   * Type:  elements of the linkes list.
   */
d24 3
a26 3
   /*
   * Type:  enumeration code for moving up and down the list.
   *        Used as second argument to `setmove_list':
d28 2
a29 2
   * MOVE_HEAD - set the cursor position to the null node at the
   *             beginning of the list.
d31 2
a32 2
   * MOVE_LAST - set the cursor position to the last node in the
   *             list.
d34 2
a35 2
   * MOVE_PREV - set the cursor position to the node immediately
   *             before it in the list.
d37 3
a39 3
   * MOVE_NEXT - set the cursor position to the node immediately
   *             after the current position.
   */
d42 4
a45 4
   /*
   * Type:  the handle returned by the constructor and passed to
   *        the other functions.
   */
d48 5
a52 5
   /*
   * Accessor:       Prints out a debug dump of the list to stderr.
   * Precondition:   valid list.
   * Postcondition:  none.
   */
d55 5
a59 5
   /*
   * Constructor:    return a new valid empty list.
   * Precondition:   none;
   * Postcondition:  returns a properly constituted empty list.
   */
d62 6
a67 6
   /*
   * Destructor:     frees up the list and its internal headers.
   * Preconditions:  list must be valid and empty.
   * Postcondition:  memory is freed and its argument is dangling.
   * Asserts:        that the precondition is met.
   */
d70 8
a77 8
   /*
   * Mutator:        moves the current position to another position
   *                 in the list (see `typedef list_move' above).
   * Precondition:   list must be valid.
   *                 MOVE_PREV may not be used in the head position.
   *                 MOVE_NEXT may not be used in the last position.
   * Postcondition:  returns TRUE if successful and FALSE if failed.
   */
d80 7
a86 7
   /*
   * Accessor:       returns the data item in the current node in the
   *                 list.  Does not release space, so if this is a
   *                 pointer, its target may not be changed or freed.
   * Precondition:   valid list and current not in the head position.
   * Postcondition:  returns NULL if called from the head positin.
   */
d89 7
a95 7
   /*
   * Mutator:        inserts new list_item into the list immediately
   *                 after the current position.
   * Precondition:   valid list.
   * Postcondition:  list_item passed in is now property of list and
   *                 not the client.
   */
d98 5
a102 5
   /*
   * Mutator:        deletes the current line from the list.
   * Precondition:   valid list and not empty.
   * Postcondition:  same list with one line removed.
   */
d105 5
a109 5
   /*
   * Accessor:       checks to see if the list is empty.
   * Precondition:   list is valid.
   * Postcondition:  returns TRUE iff the only node is the head node.
   */
d112 5
a116 5
   /*
   * Accessor:       checks to see if its argument is a list.
   * Precondition:   none.
   * Postcondition:  returns TRUE if is not null and is a list.
   */
@
